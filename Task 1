#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_INPUT_LENGTH 512
#define MAX_TOKENS 50

char currentPath[50];
char originalPath[50];


void display_prompt(){
printf("shell>>");
};

int executeExternalCommand(char **tokens) {
    pid_t pid = fork();
 
    if (pid < 0) {
        perror("Failed to create child process");
    } else if (pid == 0) {
        // Child process
        if (execvp(tokens[0], tokens) == -1) {
            perror("Failed to execute command");
            exit(EXIT_FAILURE);
        }
    } else {
        // Parent process
        wait(NULL); // Wait for the child process to complete
    }
 
    return 1; // Indicate that the command was executed
}
 
void saveOriginalPath() {
    strcpy(originalPath, getenv("PATH"));
}
 
void restoreOriginalPath() {
    if (setenv("PATH", originalPath, 1) != 0) {
        perror("Failed to restore original PATH");
    }
    printf("Restored PATH: %s\n", originalPath);
}
 
void saveCurrentPath() {
    if (getcwd(currentPath, sizeof(currentPath)) == NULL) {
        perror("Failed to get current working directory");
    }
}

int main(){

//prompting user and storing input
char input[512];

printf("$> ");
fgets(input, 512, stdin);
  input[strcspn(input, "\n")] = 0;
   
    // Parsing the input, for example, splitting it by spaces
    char *token = strtok(input, " \t|><&;");
    while (token != NULL) {
        printf("%s\n", token);
        token = strtok(NULL, " \t|><&;");

}
return 0;
}

