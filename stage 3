#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define INPUTLENGTH 512
#define TOKENSCOUNT 50

void display_prompt(){
    printf("$>  ");
};

int builtInCommands(char **tokens){
    if (strcmp(tokens[0], "cd") == 0){
        if(tokens[1] != NULL){
            if(chdir(tokens[1]) != 0){
                perror("cd");
            }
        }
        else{
            fprintf(stderr , "missing arguement");
        }
    return 1;
    }
    else if(strcmp(tokens[0], "getpath")==0){
        if(tokens[1] != NULL){
            fprintf(stderr , "arguement limit exceeded");
            return 1;
        }
    }
    printf("PATH: %s\n", getenv("PATH"));
    return 1;

 if(strcmp(tokens[0], "setpath")==0){
    if (tokens[1] != NULL && tokens[2] == NULL){
        if(setenv("PATH",  tokens[1], 1)!=0){
            perror("setpath");
        }
    }
    else{
        fprintf(stderr, "setpath : one arguement");
    }
    return 1;
}
  return 0;  
}


int externalCommmands(char **tokens){
    pid_t pid;

pid = fork();

if (pid<0){
fprintf(stderr , "fork failed");
return 1;
}
else if (pid == 0){
if (execlp(tokens[0], tokens)==-1){
    perror("failed to execute");
    exit(EXIT_FAILURE);
}
}
else{
wait(NULL);
}
return 1;
    
}

void saveOriginalPath(){
    strcpy(orginalPath , genenv("PATH"));
}

void restoreOriginalPath(){
    if (setenv("PATH:", orginalPath, 1)!= 0){
        perror("PATH restoration failed");
    }
    printf("PATH restored: " , originalPath);
}

void saveCurrentPath(){
    if (getcwd(currentPath, sizeof(currentPath)) == NULL){
        perror("failed to get cwd");
    }
}

int main(){

char input[INPUTLENGTH];
char  *tokens[TOKENSCOUNT];
char *token;

saveOriginalPath();

char *home = getenv("HOME");
if (home != NULL){
    if (chdir(home)!= 0){
        perror("failed to change directory");
    }
    else{
    printf("directory change to HOME: ", home);    
    }
}
else{
    fprintf(stderr , "no HOME environment variable");
}
}

saveCurrentPath();

while(1){
display_prompt();
fgets(input, 512 ,stdin);
input[strcspn(input, "\n")] = 0;

if (fgets(input, sizeof(input), stdin) == NULL){
    printf("exiting ...");
    break;
}
  
if (strcmp(input, "exit") == 0) {
    printf("exiting...");
            break;
        }
        
      
        token = strtok(input, " ");
        int tokenCount = 0;
        while (token != NULL && tokenCount < TOKENSCOUNT) {
            tokens[tokenCount ++] = token;
            printf("Token: %s\n", token);
            token = strtok(NULL, " ");
        }

}

if (builtInCommands(tokens)){
    continue;
}

externalCommmands(tokens);

 restoreOriginalPath();

return 0;
}
