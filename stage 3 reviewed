#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define INPUT_LENGTH 512
#define TOKENS_COUNT 50

char originalPath[INPUT_LENGTH];
char currentPath[INPUT_LENGTH];

void display_prompt() {
    printf("$> ");
}

int builtInCommands(char **tokens) {
    if (strcmp(tokens[0], "cd") == 0) {
        if (tokens[1] != NULL) {
            if (chdir(tokens[1]) != 0) {
                perror("cd");
            }
        } else {
            fprintf(stderr, "missing argument\n");
        }
        return 1;
    } else if (strcmp(tokens[0], "getpath") == 0) {
        if (tokens[1] != NULL) {
            fprintf(stderr, "argument limit exceeded\n");
            return 1;
        }
        printf("PATH: %s\n", getenv("PATH"));
        return 1;
    } else if (strcmp(tokens[0], "setpath") == 0) {
        if (tokens[1] != NULL && tokens[2] == NULL) {
            if (setenv("PATH", tokens[1], 1) != 0) {
                perror("setpath");
            }
        } else {
            fprintf(stderr, "setpath: one argument expected\n");
        }
        return 1;
    }
    return 0;
}

int externalCommands(char **tokens) {
    pid_t pid;

    pid = fork();

    if (pid < 0) {
        fprintf(stderr, "fork failed\n");
        return 1;
    } else if (pid == 0) {
        if (execvp(tokens[0], tokens) == -1) {
            perror("failed to execute");
            exit(EXIT_FAILURE);
        }
    } else {
        wait(NULL);
    }
    return 1;
}

void saveOriginalPath() {
    strcpy(originalPath, getenv("PATH"));
}

void restoreOriginalPath() {
    if (setenv("PATH", originalPath, 1) != 0) {
        perror("PATH restoration failed");
    }
    printf("PATH restored: %s\n", originalPath);
}

void saveCurrentPath() {
    if (getcwd(currentPath, sizeof(currentPath)) == NULL) {
        perror("failed to get cwd");
    }
}

int main() {
    char input[INPUT_LENGTH];
    char *tokens[TOKENS_COUNT];
    char *token;

    saveOriginalPath();

    char *home = getenv("HOME");
    if (home != NULL) {
        if (chdir(home) != 0) {
            perror("failed to change directory");
        } else {
            printf("directory changed to HOME: %s\n", home);
        }
    } else {
        fprintf(stderr, "no HOME environment variable\n");
    }

    saveCurrentPath();

    while (1) {
        display_prompt();
        fgets(input, INPUT_LENGTH, stdin);
        input[strcspn(input, "\n")] = 0;

        if (strcmp(input, "exit") == 0) {
            printf("exiting...\n");
            break;
        }

        token = strtok(input, " ");
        int tokenCount = 0;
        while (token != NULL && tokenCount < TOKENS_COUNT) {
            tokens[tokenCount++] = token;
            printf("Token: %s\n", token);
            token = strtok(NULL, " ");
        }

        if (builtInCommands(tokens)) {
            continue;
        }

        externalCommands(tokens);

        restoreOriginalPath();
    }

    return 0;
}
